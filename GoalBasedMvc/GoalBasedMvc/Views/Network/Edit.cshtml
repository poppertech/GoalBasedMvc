@model GoalBasedMvc.Models.NetworkEditViewModel

@section Scripts{

    <script>
        $(function () {

            @*var nodes = @Html.Raw(Json.Serialize(Model.Nodes));*@
            var cashFlowsData = [];
            @for(var cnt = 0; cnt < Model.CashFlows.Count; cnt++)
            {
                @:cashFlowsData.push(@Model.CashFlows[cnt].Cost);
            }

            var goalAttainmentData = [];
            @for(var cnt = 0; cnt < Model.Portfolio.SuccessProbabilities.Count; cnt++)
            {
                @:goalAttainmentData.push(@Model.Portfolio.SuccessProbabilities[cnt]);
            }

            // TODO: alter the Post method on the controller to accept cashflow and nodes as json on ajax post

            var selectedNode;
            var distributionChart, cashFlowsChart, goalAttainmentChart;

            var distribution = {
                Minimum : 50, Worst : 85, Likely : 105, Best : 125, Maximum : 150,
                HeightWorst : .57, HeightLikely : 3.31, HeightBest : .8,
                Mean : 1, Stdev : 2, Skew : 3, Kurt : 4
            };

            var parentNode = { Id : 1, Name : "Parent", IsPortfolioComponent : false, Distributions : [distribution] };

            var childNode = {
                Id: 2, Name : "Child", InitialInvestment : 200000, InitialPrice : 100,
                Parent : parentNode, IsPortfolioComponent : true,
                Distributions : [distribution, distribution, distribution, distribution]
            };

            var nodes = { 1: parentNode, 2: childNode };

            init();

            function init() {

                Chart.defaults.scale.gridLines.display = false;
                createNodeTable();
                $('#selectDistribution').change(selectDistributionByIndex);
                $('button[data-node-id]').click(selectNode);
                $('input[data-node-id]').change(changeNodeInput);
                $('input[data-distribution-field]').change(changeDistributionInput);
                $('#btnDownloadNodes').click(downloadNodeFile);
                $('#CashFlows').change(loadCashFlowFile);
                $('#Nodes').change(loadNodesFile);
                $('button[data-node-id]').first().click();
                createCashFlowsGraph();
                createGoalAttainmentGraph();

            }

            function createNodeTable() {
                var strTemplate;
                for (var nodeId in nodes) {
                    var node = nodes[nodeId];
                    if (node.IsPortfolioComponent) {
                        var strTemplate = $('#PortfolioComponentTemplate').html();
                    } else {
                        var strTemplate = $('#NonPortfolioComponentTemplate').html();
                    }
                    fillTemplate(node, strTemplate);
                }
            }

            function fillTemplate(node, strTemplate) {
                    var template = $($.parseHTML(strTemplate));
                    template.find('td[data-node-field]').each(function () {
                        var fieldValue;
                            var fieldName = $(this).attr('data-node-field');
                            if (fieldName === 'Parent.Name') {
                                var parent = node['Parent'];
                                fieldValue = parent ? parent['Name']:"";
                            } else {
                                fieldValue = node[fieldName];
                            }
                            $(this).html(fieldValue);
                    });
                template.find('[data-node-id]').each(function () {
                            $(this).attr('data-node-id', node.Id);
                    });
                    template.find('input[data-node-field]').each(function () {
                            var fieldName = $(this).attr('data-node-field');
                            var fieldValue = node[fieldName];
                            $(this).val(fieldValue);
                    });
                    $('#tblNodes tbody').append(template);
            }

            function downloadNodeFile(event) {
                event.preventDefault();
                var name = "nodes.json";
                var type = "application/json";
                var data = JSON.stringify(nodes);
                if (data && navigator.msSaveBlob)
                    return navigator.msSaveBlob(new Blob([data], { type: type }, name));
                var a = $("<a style='display: none;'/>");
                var url = window.URL.createObjectURL(new Blob([data], { type: type }));
                a.attr("href", url);
                a.attr("download", name);
                $("body").append(a);
                a[0].click();
                window.URL.revokeObjectURL(url);
                a.remove();
            }

            function selectNode() {
                var element = $(this);
                $('button[data-node-id]').removeClass('btn-success');
                element.addClass('btn-success');
                var nodeId = element.data('nodeId');
                selectedNode = nodes[nodeId];
                setSelectDistributionOptions(selectedNode);
                selectDistributionByIndex();
            }

            function changeNodeInput() {
                var element = $(this);
                var nodeId = element.data('nodeId');
                var nodeField = element.data('nodeField');
                var node = nodes[nodeId];
                node[nodeField] = element.val();
            }

            function changeDistributionInput() {
                var element = $(this);
                var distributionField = element.data('distributionField');
                selectedDistribution[distributionField] = element.val();
            }

            function selectDistributionByIndex() {
                var index = $('#selectDistribution').val();
                selectedDistribution = selectedNode.Distributions[index];
                $('#mean').html(selectedDistribution.Mean);
                $('#stdev').html(selectedDistribution.Stdev);
                $('#skew').html(selectedDistribution.Skew);
                $('#kurt').html(selectedDistribution.Kurt);
                $("input[data-distribution-field='Minimum']").val(selectedDistribution.Minimum);
                $("input[data-distribution-field='Worst']").val(selectedDistribution.Worst);
                $("input[data-distribution-field='Likely']").val(selectedDistribution.Likely);
                $("input[data-distribution-field='Best']").val(selectedDistribution.Best);
                $("input[data-distribution-field='Maximum']").val(selectedDistribution.Maximum);

                if (distributionChart) {
                    var label = ["Minimum", "Worst", "Likely", "Best", "Maximum"];
                    var distributionData = getDistributionGraphData(selectedDistribution);
                    removeGraphData(distributionChart);
                    addGraphData(distributionChart, distributionData, label);
                } else {
                    createDistributionGraph(selectedDistribution);
                }

            }

            function setSelectDistributionOptions(selectedNode) {
                $('#selectDistribution').empty();
                if (!selectedNode.Parent) {
                    $('<option>Distribution</option>').val(0).appendTo('#selectDistribution');
                }else{
                    $('<option>Left Tail</option>').val(0).appendTo('#selectDistribution');
                    $('<option>Left Normal</option>').val(1).appendTo('#selectDistribution');
                    $('<option>Right Normal</option>').val(2).appendTo('#selectDistribution');
                    $('<option>Right Tail</option>').val(3).appendTo('#selectDistribution');
                }
            }

            function createDistributionGraph(selectedDistribution) {
                var distributionData = getDistributionGraphData(selectedDistribution);
                var distributionCtx = document.getElementById("distributionChart").getContext("2d");
                distributionChart = new Chart(distributionCtx, {
                    type: 'scatter',
                    data: {
                        labels: ["Minimum", "Worst", "Likely", "Best", "Maximum"],
                        datasets: [{
                            label: 'Distribution',
                            showLine: true,
                            lineTension: 0,
                            data: distributionData
                        }]
                    },
                    options: {
                        legend: {
                            display: false
                        },
                        scales: {
                            yAxes: [{
                                gridLines: {
                                    drawBorder: false,
                                },
                                ticks: {
                                    display: false
                                }
                            }],
                            xAxes: [{
                                type: 'linear',
                                position: 'bottom',
                                ticks: {
                                    fontSize: 14,
                                    fontStyle: 'bold'
                                }
                            }]
                        }
                    }
                });
            }

            function removeGraphData(chart) {
                chart.data.labels = [];
                chart.data.datasets[0].data = [];
                chart.update();
            }

            function addGraphData(chart, data, labels) {
                chart.data.labels = labels
                chart.data.datasets[0].data = data;
                chart.update();
            }

            function getDistributionGraphData(distribution) {
                return [
                    { x: distribution.Minimum, y: 0 },
                    { x: distribution.Worst, y: distribution.HeightWorst },
                    { x: distribution.Likely, y: distribution.HeightLikely },
                    { x: distribution.Best, y: distribution.HeightBest },
                    { x: distribution.Maximum, y: 0 }
                ];
            }

            function createCashFlowsGraph() {
                var cashFlowsLabels = getTimeSeriesGraphLabels(cashFlowsData);
                var cashFlowsCtx = document.getElementById("cashFlowsChart").getContext("2d");

                cashFlowsChart = new Chart(cashFlowsCtx, {
                    type: 'line',
                    data: {
                        labels: cashFlowsLabels,
                        datasets: [{
                            label: 'Cash Flow',
                            lineTension: 0,
                            data: cashFlowsData
                        }]
                    },
                    options: {
                        legend: {
                            display: false
                        },
                        scales: {
                            yAxes: [{
                                ticks: {
                                    fontSize: 14,
                                    fontStyle: 'bold'
                                }
                            }],
                            xAxes: [{
                                ticks: {
                                    fontSize: 14,
                                    fontStyle: 'bold'
                                }
                            }]
                        }
                    }
                });
            }

            function createGoalAttainmentGraph() {
                var goalAttainmentLabels = getTimeSeriesGraphLabels(goalAttainmentData);
                var goalAttainmentCtx = document.getElementById("goalAttainmentChart").getContext("2d");

                goalAttainmentChart = new Chart(goalAttainmentCtx, {
                    type: 'line',
                    data: {
                        labels: goalAttainmentLabels,
                        datasets: [{
                            label: 'Goal Attainment',
                            lineTension: 0,
                            data: goalAttainmentData
                        }]
                    },
                    options: {
                        legend: {
                            display: false
                        },
                        scales: {
                            yAxes: [{
                                ticks: {
                                    fontSize: 14,
                                    fontStyle: 'bold'
                                }
                            }],
                            xAxes: [{
                                ticks: {
                                    fontSize: 14,
                                    fontStyle: 'bold'
                                }
                            }]
                        }
                    }
                });
            }

            function getTimeSeriesGraphLabels(data) {
                var labels = [];
                for (var cnt = 0; cnt < data.length; cnt++) {
                        labels.push("Year " + cnt);
                }
                return labels;
            }

            function loadCashFlowFile() {
                var input = $("#CashFlows")[0];
                var file = input.files[0];
                var fileReader = new FileReader();
                fileReader.onload = updateCashFlowChart;
                fileReader.readAsText(file);
            }

            function updateCashFlowChart(e) {
                var lines = e.target.result;
                cashFlowsData = lines.split(/\n/);
                cashFlowsData.splice(0, 1);
                cashFlowsData = cashFlowsData.filter(function (el) { return el.length > 0 });
                $("#goalAttainmentContainer").hide();
                removeGraphData(cashFlowsChart);
                var labels = getTimeSeriesGraphLabels(cashFlowsData);
                addGraphData(cashFlowsChart, cashFlowsData, labels);
            }

            function loadNodesFile() {
                var input = $("#Nodes")[0];
                var file = input.files[0];
                var fileReader = new FileReader();
                fileReader.onload = updateNodes;
                fileReader.readAsText(file);
            }

            function updateNodes(e) {
                var lines = e.target.result;
                nodes = JSON.parse(lines);
                $('#tblNodes tbody').empty();
                createNodeTable();
                $("#goalAttainmentContainer").hide();
            }

         });
    </script>

}

<div class="panel panel-primary">
    <div class="panel-heading">
        <h1 class="panel-title">Network 1</h1>
    </div>

    <form asp-controller="Network" asp-action="Edit" enctype="multipart/form-data" method="post" class="panel-body">

        <div id="goalAttainmentContainer" class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title">Probability of Success</h3>
            </div>

            <div class="panel-body">
                <div class="row">
                    <div class="col-md-10 col-md-offset-1">
                        <canvas id="goalAttainmentChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title">Cash Flows</h3>
            </div>

            <div class="row">
                <div class="col-xs-8 col-sm-6 col-md-4">
                    <input type="file" id="CashFlows" class="form-control" aria-label="Upload Cash Flows" />
                </div>
                <a class="btn btn-default" aria-label="Download Cash Flows" asp-controller="CashFlow" asp-action="Get" asp-route-networkId="@Model.Id">
                    <span class="glyphicon glyphicon-download" aria-hidden="true"></span>
                </a>
            </div>

            <div class="panel-body">
                <div class="row">
                    <div class="col-md-10 col-md-offset-1">
                        <canvas id="cashFlowsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title">Nodes</h3>
            </div>

            <div class="row">
                <div class="col-xs-8 col-sm-6 col-md-4">
                    <input type="file" id="Nodes" class="form-control" aria-label="Upload Nodes" />
                </div>
                <a id="btnDownloadNodes" class="btn btn-default" aria-label="Download Nodes" asp-controller="Node" asp-action="Get" asp-route-networkId="@Model.Id">
                    <span class="glyphicon glyphicon-download" aria-hidden="true"></span>
                </a>
            </div>


            <div class="table-responsive">
                <table id="tblNodes" class="table table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Parent</th>
                            <th>Initial Investment</th>
                            <th>Initial Price</th>
                            <th>Portfolio Component?</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>


            <div class="panel-body">

                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h5 class="panel-title">Distribution</h5>
                    </div>

                    <div class="row">
                        <div class="col-xs-8 col-sm-6 col-md-4">
                            <select id="selectDistribution" class="form-control"></select>
                        </div>
                    </div>

                    <div class="panel-body">

                        <div class="row">
                            <div class="col-sm-2 col-sm-offset-1">
                                <div class="form-group">
                                    <label>Minimum</label>
                                    <input data-distribution-field="Minimum" class="form-control" />
                                </div>
                            </div>
                            <div class="col-sm-2">
                                <div class="form-group">
                                    <label>Worst</label>
                                    <input data-distribution-field="Worst" class="form-control" />
                                </div>
                            </div>
                            <div class="col-sm-2">
                                <div class="form-group">
                                    <label>Likely</label>
                                    <input data-distribution-field="Likely" class="form-control" />
                                </div>
                            </div>
                            <div class="col-sm-2">
                                <div class="form-group">
                                    <label>Best</label>
                                    <input data-distribution-field="Best" class="form-control" />
                                </div>
                            </div>
                            <div class="col-sm-2">
                                <div class="form-group">
                                    <label>Maximum</label>
                                    <input data-distribution-field="Maximum" class="form-control" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-10 col-md-offset-1">
                                <canvas id="distributionChart"></canvas>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-10 col-md-offset-1">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Average</th>
                                                <th>Volatility</th>
                                                <th>Skewness</th>
                                                <th>Kurtosis</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td id="mean"></td>
                                                <td id="stdev"></td>
                                                <td id="skew"></td>
                                                <td id="kurt"></td>
                                            </tr>

                                        </tbody>
                                    </table>
                                </div>

                            </div>
                        </div>

                    </div>
                </div>

            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="btn-group pull-right" role="group">
                    <button type="submit" class="btn btn-lg btn-primary">Calculate</button>
                    <a class="btn btn-lg btn-danger pull-right" asp-area="" asp-controller="Network" asp-action="Index">Search</a>
                </div>
            </div>
        </div>

    </form>

</div>

<script id="NonPortfolioComponentTemplate" type="text/x-jquery-tmpl">
    <tr>
        <td data-node-field="Id"></td>
        <td data-node-field="Name"></td>
        <td data-node-field="Parent.Name"></td>
        <td data-node-field='InitialInvestment'></td>
        <td data-node-field="InitialPrice"></td>
        <td data-node-field="IsPortfolioComponent"></td>
        <td><button type="button" data-node-id="">Select</button></td>
    </tr>
</script>

<script id="PortfolioComponentTemplate" type="text/x-jquery-tmpl">
    <tr>
        <td data-node-field="Id"></td>
        <td data-node-field="Name"></td>
        <td data-node-field="Parent.Name"></td>
        <td>
            <input class='form-control' data-node-field='InitialInvestment' data-node-id='' />
        </td>
        <td>
            <input class="form-control" data-node-field='InitialPrice' data-node-id='' />
        </td>
        <td data-node-field="IsPortfolioComponent"></td>
        <td>
            <button type="button" data-node-id="">
                Select
            </button>
        </td>
    </tr>
</script>
