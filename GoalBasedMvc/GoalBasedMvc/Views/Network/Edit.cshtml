@model GoalBasedMvc.Models.NetworkEditViewModel

@section Scripts{

    <script>
        $(function () {

            @*var nodes = @Html.Raw(Json.Serialize(Model.Nodes));*@

            var distributionChart;
            var distribution = {
                Minimum : 50, Worst : 85, Likely : 105, Best : 125, Maximum : 150,
                HeightWorst : .57, HeightLikely : 3.31, HeightBest : .8,
                Mean : 1, Stdev : 2, Skew : 3, Kurt : 4
            };

            var parentNode = { Id : 1, Name : "Parent", IsPortfolioComponent : false, Distributions : [distribution] };

            var childNode = {
                Id: 2, Name : "Child", InitialInvestment : 200000, InitialPrice : 100,
                Parent : parentNode, IsPortfolioComponent : true,
                Distributions : [distribution, distribution, distribution, distribution]
            };

            var nodes = { 1: parentNode, 2: childNode };

            init();

            function init() {

                Chart.defaults.scale.gridLines.display = false;
                $('#selectDistribution').change(selectDistributionByIndex);
                $('button[data-node-id]').click(selectNode);
                $('#btnDownloadNodes').click(downloadNodeFile);
                var selectedNode = parentNode;
                setSelectDistributionOptions(selectedNode);
                var selectedDistribution = selectedNode.Distributions[0];
                createDistributionGraph(selectedDistribution);
                createCashFlowsGraph();
                createGoalAttainmentGraph();
                $('button[data-node-id]').first().click();
            }

            function downloadNodeFile(event) {
                event.preventDefault();
                var name = "nodes.json";
                var type = "application/json";
                var data = JSON.stringify(nodes);
                if (data && navigator.msSaveBlob)
                    return navigator.msSaveBlob(new Blob([data], { type: type }, name));
                var a = $("<a style='display: none;'/>");
                var url = window.URL.createObjectURL(new Blob([data], { type: type }));
                a.attr("href", url);
                a.attr("download", name);
                $("body").append(a);
                a[0].click();
                window.URL.revokeObjectURL(url);
                a.remove();
            }

            function selectNode() {
                var element = $(this);
                $('button[data-node-id]').removeClass('btn-success');
                element.addClass('btn-success');
                var nodeId = element.data('nodeId');
                selectedNode = nodes[nodeId];
                setSelectDistributionOptions(selectedNode);
                selectDistributionByIndex();
            }

            function selectDistributionByIndex() {
                var index = $('#selectDistribution').val();
                selectedDistribution = selectedNode.Distributions[index];
                $('#mean').val(selectedDistribution.Mean);
                $('#stdev').val(selectedDistribution.Stdev);
                $('#skew').val(selectedDistribution.Skew);
                $('#kurt').val(selectedDistribution.Kurt);
                removeDistributionGraphData();
                addDistributionGraphData(selectedDistribution)
            }

            function setSelectDistributionOptions(selectedNode) {
                $('#selectDistribution').empty();
                if (!selectedNode.Parent) {
                    $('<option>Distribution</option>').val(0).appendTo('#selectDistribution');
                }else{
                    $('<option>Left Tail</option>').val(0).appendTo('#selectDistribution');
                    $('<option>Left Normal</option>').val(1).appendTo('#selectDistribution');
                    $('<option>Right Normal</option>').val(2).appendTo('#selectDistribution');
                    $('<option>Right Tail</option>').val(3).appendTo('#selectDistribution');
                }
            }

            function createDistributionGraph(selectedDistribution) {
                var distributionData = getDistributionGraphData(selectedDistribution);
                var distributionCtx = document.getElementById("distributionChart").getContext("2d");
                distributionChart = new Chart(distributionCtx, {
                    type: 'scatter',
                    data: {
                        labels: ["Minimum", "Worst", "Likely", "Best", "Maximum"],
                        datasets: [{
                            label: 'Distribution',
                            showLine: true,
                            lineTension: 0,
                            data: distributionData
                        }]
                    },
                    options: {
                        legend: {
                            display: false
                        },
                        scales: {
                            yAxes: [{
                                gridLines: {
                                    drawBorder: false,
                                },
                                ticks: {
                                    display: false
                                }
                            }],
                            xAxes: [{
                                type: 'linear',
                                position: 'bottom',
                                ticks: {
                                    fontSize: 14,
                                    fontStyle: 'bold'
                                }
                            }]
                        }
                    }
                });
            }

            function removeDistributionGraphData() {
                if (!distributionChart || !distributionChart.data || !distributionChart.data.labels)
                    return;
                distributionChart.data.labels.pop();
                for (var dataset in distributionChart.data.datasets) {
                    if(dataset && dataset.data)
                        dataset.data.pop();
                }
                distributionChart.update();
            }

            function addDistributionGraphData(selectedDistribution) {
                if (!distributionChart)
                    return;
                var distributionData = getDistributionGraphData(selectedDistribution);
                var label = ["Minimum", "Worst", "Likely", "Best", "Maximum"];
                if(distributionChart.data.labels.length < 1)
                    distributionChart.data.labels.push(label);
                for (var dataset in distributionChart.data.datasets) {
                     if(dataset && dataset.data && dataset.data.length < 1)
                        dataset.data.push(distributionData);
                }
                distributionChart.update();
            }

            function getDistributionGraphData(distribution) {
                return [
                    { x: distribution.Minimum, y: 0 },
                    { x: distribution.Worst, y: distribution.HeightWorst },
                    { x: distribution.Likely, y: distribution.HeightLikely },
                    { x: distribution.Best, y: distribution.HeightBest },
                    { x: distribution.Maximum, y: 0 }
                ];
            }

            function createCashFlowsGraph() {
                var cashFlowsLabels = [];
                var cashFlowsData = [];
                var cashFlowsCtx = document.getElementById("cashFlowsChart").getContext("2d");
                @for(var cnt = 0; cnt < Model.CashFlows.Count; cnt++)
                {
                    @:cashFlowsLabels.push("Year @cnt");
                    @:cashFlowsData.push(@Model.CashFlows[cnt].Cost);
                }
                var cashFlows = new Chart(cashFlowsCtx, {
                    type: 'line',
                    data: {
                        labels: cashFlowsLabels,
                        datasets: [{
                            label: 'Cash Flow',
                            lineTension: 0,
                            data: cashFlowsData
                        }]
                    },
                    options: {
                        legend: {
                            display: false
                        },
                        scales: {
                            yAxes: [{
                                ticks: {
                                    fontSize: 14,
                                    fontStyle: 'bold'
                                }
                            }],
                            xAxes: [{
                                ticks: {
                                    fontSize: 14,
                                    fontStyle: 'bold'
                                }
                            }]
                        }
                    }
                });
            }

            function createGoalAttainmentGraph() {
                var goalAttainmentLabels = [];
                var goalAttainmentData = [];
                var goalAttainmentCtx = document.getElementById("goalAttainmentChart").getContext("2d");
                @for(var cnt = 0; cnt < Model.Portfolio.SuccessProbabilities.Count; cnt++)
                {
                    @:goalAttainmentLabels.push("Year @cnt");
                    @:goalAttainmentData.push(@Model.Portfolio.SuccessProbabilities[cnt]);
                }
                var goalAttainment = new Chart(goalAttainmentCtx, {
                    type: 'line',
                    data: {
                        labels: goalAttainmentLabels,
                        datasets: [{
                            label: 'Goal Attainment',
                            lineTension: 0,
                            data: goalAttainmentData
                        }]
                    },
                    options: {
                        legend: {
                            display: false
                        },
                        scales: {
                            yAxes: [{
                                ticks: {
                                    fontSize: 14,
                                    fontStyle: 'bold'
                                }
                            }],
                            xAxes: [{
                                ticks: {
                                    fontSize: 14,
                                    fontStyle: 'bold'
                                }
                            }]
                        }
                    }
                });
            }

         });
    </script>

}

<div class="panel panel-primary">
    <div class="panel-heading">
        <h1 class="panel-title">Network 1</h1>
    </div>

    <form asp-controller="Network" asp-action="Edit" enctype="multipart/form-data" method="post" class="panel-body">

        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title">Probability of Success</h3>
            </div>

            <div class="panel-body">
                <div class="row">
                    <div class="col-md-10 col-md-offset-1">
                        <canvas id="goalAttainmentChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title">Cash Flows</h3>
            </div>

            <div class="row">
                <div class="col-xs-8 col-xs-offset-2 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-7">
                    <input type="file" name="CashFlows" class="form-control" aria-label="Upload Cash Flows" />
                </div>
                <a class="btn btn-default" aria-label="Download Cash Flows" asp-controller="CashFlow" asp-action="Get" asp-route-networkId="@Model.Id">
                    <span class="glyphicon glyphicon-download" aria-hidden="true"></span>
                </a>
            </div>

            <div class="panel-body">
                <div class="row">
                    <div class="col-md-10 col-md-offset-1">
                        <canvas id="cashFlowsChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="panel panel-info">
            <div class="panel-heading">
                <h3 class="panel-title">Nodes</h3>
            </div>

            <div class="row">
                <div class="col-xs-8 col-xs-offset-2 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-7">
                    <input type="file" name="Tree" class="form-control" aria-label="Upload Nodes" />
                </div>
                <a id="btnDownloadNodes" class="btn btn-default" aria-label="Download Nodes" asp-controller="Node" asp-action="Get" asp-route-networkId="@Model.Id">
                    <span class="glyphicon glyphicon-download" aria-hidden="true"></span>
                </a>
            </div>


            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Parent</th>
                            <th>Initial Investment</th>
                            <th>Initial Price</th>
                            <th>Portfolio Component?</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var node in Model.Nodes)
                        {
                            <tr>
                                <td>@node.Id</td>
                                <td>@node.Name</td>
                                <td>@node.Parent?.Name</td>
                                <td>@node.InitialInvestment</td>
                                <td>@node.InitialPrice</td>
                                <td>@(node.IsPortfolioComponent ? "Yes" : "No")</td>
                                <td>
                                    <button type="button" class="btn" data-node-id="@node.Id">
                                        Select
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>


            <div class="panel-body">

                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h5 class="panel-title">Distribution</h5>
                    </div>

                    <div class="panel-body">
                        <div class="row">


                            <div class="col-xs-8 col-xs-offset-2 col-sm-6 col-sm-offset-5 col-md-4 col-md-offset-7">

                                <select id="selectDistribution" class="form-control pull-right"></select>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-10 col-md-offset-1">
                                <canvas id="distributionChart"></canvas>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-10 col-md-offset-1">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Average</th>
                                                <th>Volatility</th>
                                                <th>Skewness</th>
                                                <th>Kurtosis</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td id="mean">@Model.Nodes[0].Distributions[0].Mean</td>
                                                <td id="stdev">@Model.Nodes[0].Distributions[0].Stdev</td>
                                                <td id="skew">@Model.Nodes[0].Distributions[0].Skew</td>
                                                <td id="kurt">@Model.Nodes[0].Distributions[0].Kurt</td>
                                            </tr>

                                        </tbody>
                                    </table>
                                </div>

                            </div>
                        </div>

                    </div>
                </div>

            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="btn-group pull-right" role="group">
                    <button type="submit" class="btn btn-lg btn-primary">Calculate</button>
                    <a class="btn btn-lg btn-danger pull-right" asp-area="" asp-controller="Network" asp-action="Index">Search</a>
                </div>
            </div>
        </div>

    </form>

</div>
